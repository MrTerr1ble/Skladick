# seed_data.py
import os
import django
import sys
from decimal import Decimal
import random
from django.utils import timezone

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ apps
current_dir = os.path.dirname(__file__)
apps_path = os.path.join(current_dir, 'apps')
sys.path.insert(0, apps_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'skladick.settings')
django.setup()

print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

try:
    # 1. –°–∫–ª–∞–¥—ã –∏ –ª–æ–∫–∞—Ü–∏–∏
    print("üì¶ –°–æ–∑–¥–∞–µ–º —Å–∫–ª–∞–¥—ã –∏ –ª–æ–∫–∞—Ü–∏–∏...")
    from apps.warehouses.models import Warehouse, Location

    warehouses_data = [
        {'code': 'WH_NORTH_1', 'name': '–°–µ–≤–µ—Ä–Ω—ã–π —Ä—É–¥–Ω–∏–∫ ‚Ññ1'},
        {'code': 'WH_NORTH_2', 'name': '–°–µ–≤–µ—Ä–Ω—ã–π —Ä—É–¥–Ω–∏–∫ ‚Ññ2'},
        {'code': 'WH_CENTRAL_1', 'name': '–ü–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥ ‚Ññ1'},
        {'code': 'WH_CENTRAL_2', 'name': '–ü–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∑–∞–≤–æ–¥ ‚Ññ2'},
    ]

    for data in warehouses_data:
        wh, created = Warehouse.objects.get_or_create(**data)
        if created:
            print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫–ª–∞–¥: {wh.name}')

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
    locations_data = [
        {'code': 'ZONE_A', 'name': '–ó–æ–Ω–∞ –ê - –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ'},
        {'code': 'ZONE_B', 'name': '–ó–æ–Ω–∞ –ë - –ë—É—Ñ–µ—Ä–Ω–∞—è'},
        {'code': 'ZONE_C', 'name': '–ó–æ–Ω–∞ –í - –ö–∞—Ä–∞–Ω—Ç–∏–Ω'},
        {'code': 'YARD_1', 'name': '–û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–æ—â–∞–¥–∫–∞ 1'},
    ]

    for warehouse in Warehouse.objects.all():
        for loc_data in locations_data:
            loc, created = Location.objects.get_or_create(
                warehouse=warehouse,
                code=f"{warehouse.code}_{loc_data['code']}",
                name=f"{warehouse.name} - {loc_data['name']}"
            )
            if created:
                print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {loc.name}')

    # 2. –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
    print("üìã –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É...")
    from apps.catalog.models import Uom, Item, Supplier

    # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    uoms_data = [
        {'code': 'TON', 'name': '–¢–æ–Ω–Ω–∞'},
        {'code': 'KG', 'name': '–ö–∏–ª–æ–≥—Ä–∞–º–º'},
        {'code': 'PCS', 'name': '–®—Ç—É–∫–∞'},
        {'code': 'L', 'name': '–õ–∏—Ç—Ä'},
        {'code': 'M3', 'name': '–ö—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä'},
    ]

    for data in uoms_data:
        uom, created = Uom.objects.get_or_create(**data)
        if created:
            print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {uom.name}')

    # –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
    suppliers_data = [
        {'code': 'SUP_001', 'name': '–û–û–û –ì–æ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'},
        {'code': 'SUP_002', 'name': '–ó–ê–û –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è'},
        {'code': 'SUP_003', 'name': '–ê–û –ú–µ—Ç–∞–ª–ª—Å–µ—Ä–≤–∏—Å'},
    ]

    for data in suppliers_data:
        supplier, created = Supplier.objects.get_or_create(**data)
        if created:
            print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}')

    # –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ - –ë–ï–ó tracking_mode
    items_data = [
        {'sku': 'ORE_COPPER', 'name': '–ú–µ–¥–Ω–∞—è —Ä—É–¥–∞', 'base_uom_id': 1},
        {'sku': 'ORE_NICKEL', 'name': '–ù–∏–∫–µ–ª–µ–≤–∞—è —Ä—É–¥–∞', 'base_uom_id': 1},
        {'sku': 'ORE_IRON', 'name': '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞', 'base_uom_id': 1},
        {'sku': 'ORE_GOLD', 'name': '–ó–æ–ª–æ—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ä—É–¥–∞', 'base_uom_id': 1},
        {'sku': 'TOOL_DRILL', 'name': '–ë—É—Ä–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', 'base_uom_id': 3},
        {'sku': 'EQUIP_EXCAVATOR', 'name': '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä', 'base_uom_id': 3},
        {'sku': 'SPARE_ENGINE', 'name': '–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø–∞—Å–Ω–æ–π', 'base_uom_id': 3},
        {'sku': 'CHEM_REAGENT', 'name': '–§–ª–æ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∞–≥–µ–Ω—Ç', 'base_uom_id': 4},
    ]

    for item_data in items_data:
        item, created = Item.objects.get_or_create(**item_data)
        if created:
            print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: {item.name}')

    # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    print("üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã...")
    from apps.users.models import User

    users_data = [
        {'username': 'admin', 'password': 'admin123', 'full_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã', 'role': 'ADMIN'},
        {'username': 'operator1', 'password': 'operator123', 'full_name': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', 'role': 'OPERATOR'},
        {'username': 'warehouse1', 'password': 'warehouse123', 'full_name': '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
         'role': 'WAREHOUSE'},
        {'username': 'analyst1', 'password': 'analyst123', 'full_name': '–°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞', 'role': 'ANALYST'},
    ]

    for user_data in users_data:
        user, created = User.objects.get_or_create(
            username=user_data['username'],
            defaults={
                'full_name': user_data['full_name'],
                'role': user_data['role'],
                'is_staff': True,
                'is_active': True
            }
        )
        if created:
            user.set_password(user_data['password'])
            user.save()
            print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}')

    # 4. –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    print("üìä –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏...")
    from apps.inventory.models import Inventory, Movement

    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    items = Item.objects.all()[:4]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 —Ç–æ–≤–∞—Ä–∞
    locations = Location.objects.all()[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –ª–æ–∫–∞—Ü–∏–∏

    for location in locations:
        for item in items:
            qty = Decimal(str(random.randint(10, 100)))
            inventory, created = Inventory.objects.get_or_create(
                location=location,
                item=item,
                defaults={'qty_on_hand': qty, 'uom': item.base_uom}
            )

            if created:
                Movement.objects.create(
                    type=Movement.RECEIPT,
                    occurred_at=timezone.now(),
                    item=item,
                    to_location=location,
                    qty=qty,
                    uom=item.base_uom,
                    note="–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫"
                )
                print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å—Ç–∞—Ç–æ–∫: {item.name} –≤ {location.name} - {qty}')

    # 5. –°—Ç–æ–∫-–ø–∞–π–ª—ã –¥–ª—è —Ä—É–¥—ã
    print("‚õ∞Ô∏è –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–∫-–ø–∞–π–ª—ã –¥–ª—è —Ä—É–¥—ã...")
    try:
        from stockpiles.models import Stockpile, StockpileThreshold

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–Ω–Ω—ã
        ton_uom = Uom.objects.get(code='TON')

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–∫-–ø–∞–π–ª—ã –¥–ª—è —Å–µ–≤–µ—Ä–Ω—ã—Ö —Ä—É–¥–Ω–∏–∫–æ–≤
        stockpiles_data = [
            {'code': 'SP_COPPER_1', 'name': '–ú–µ–¥–Ω–∞—è —Ä—É–¥–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∫—É—á–∞', 'capacity_qty': Decimal('10000.000')},
            {'code': 'SP_NICKEL_1', 'name': '–ù–∏–∫–µ–ª–µ–≤–∞—è —Ä—É–¥–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∫—É—á–∞', 'capacity_qty': Decimal('8000.000')},
            {'code': 'SP_IRON_1', 'name': '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∫—É—á–∞', 'capacity_qty': Decimal('15000.000')},
        ]

        for warehouse in Warehouse.objects.filter(code__contains='NORTH'):
            for sp_data in stockpiles_data:
                stockpile, created = Stockpile.objects.get_or_create(
                    warehouse=warehouse,
                    code=f"{warehouse.code}_{sp_data['code']}",
                    defaults={
                        'name': f"{warehouse.name} - {sp_data['name']}",
                        'capacity_qty': sp_data['capacity_qty'],
                        'uom': ton_uom
                    }
                )

                if created:
                    print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–æ–∫-–ø–∞–π–ª: {stockpile.name}')

    except ImportError:
        print('  ‚ö†Ô∏è  –ú–æ–¥—É–ª—å stockpiles –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...')

    # 6. –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–∫—É–ø–∫—É
    print("üìù –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–∫—É–ø–∫—É...")
    try:
        from procurement.models import PurchaseRequest

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
        low_stock_item = Item.objects.get(sku='TOOL_DRILL')
        supplier = Supplier.objects.first()
        warehouse = Warehouse.objects.first()

        pr, created = PurchaseRequest.objects.create(
            item=low_stock_item,
            qty=Decimal('50.000'),
            uom=low_stock_item.base_uom,
            warehouse=warehouse,
            supplier=supplier,
            state=PurchaseRequest.SUBMITTED,
            comment="–°—Ä–æ—á–Ω–∞—è –∑–∞–∫—É–ø–∫–∞ –≤ —Å–≤—è–∑–∏ —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏"
        )
        if created:
            print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É: {pr.item.name}')

    except ImportError:
        print('  ‚ö†Ô∏è  –ú–æ–¥—É–ª—å procurement –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...')

    # 7. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    print("üöö –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã...")
    try:
        from transport.models import TransportUnit

        transport_data = [
            {'type': 'TRUCK', 'number': '–ê123–ë–í77'},
            {'type': 'TRUCK', 'number': '–í456–ì–î78'},
            {'type': 'TRAIN', 'number': '745632'},
            {'type': 'TRAIN', 'number': '845213'},
        ]

        for data in transport_data:
            unit, created = TransportUnit.objects.get_or_create(**data)
            if created:
                print(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞: {unit}')

    except ImportError:
        print('  ‚ö†Ô∏è  –ú–æ–¥—É–ª—å transport –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...')

    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")


    def create_thresholds_and_alerts(self):
        self.stdout.write("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∞–ª–µ—Ä—Ç—ã...")

        try:
            from thresholds.models import Threshold, Alert
            from catalog.models import Item
            from warehouses.models import Warehouse

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            critical_items = [
                {'sku': 'TOOL_DRILL', 'min_qty': Decimal('10.000'), 'max_qty': Decimal('100.000')},
                {'sku': 'CHEM_REAGENT', 'min_qty': Decimal('50.000'), 'max_qty': Decimal('500.000')},
                {'sku': 'SPARE_ENGINE', 'min_qty': Decimal('2.000'), 'max_qty': Decimal('10.000')},
            ]

            # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ä—É–¥—ã
            ore_items = [
                {'sku': 'ORE_COPPER', 'min_qty': Decimal('1000.000'), 'max_qty': Decimal('8000.000')},
                {'sku': 'ORE_NICKEL', 'min_qty': Decimal('800.000'), 'max_qty': Decimal('6000.000')},
                {'sku': 'ORE_IRON', 'min_qty': Decimal('2000.000'), 'max_qty': Decimal('12000.000')},
                {'sku': 'ORE_GOLD', 'min_qty': Decimal('500.000'), 'max_qty': Decimal('3000.000')},
            ]

            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
            for warehouse in Warehouse.objects.all():
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö
                for item_data in critical_items:
                    try:
                        item = Item.objects.get(sku=item_data['sku'])
                        threshold, created = Threshold.objects.get_or_create(
                            warehouse=warehouse,
                            item=item,
                            defaults={
                                'min_qty': item_data['min_qty'],
                                'max_qty': item_data['max_qty'],
                                'uom': item.base_uom
                            }
                        )
                        if created:
                            self.stdout.write(f'  ‚úÖ –ü–æ—Ä–æ–≥: {item.name} –Ω–∞ {warehouse.name}')
                    except Item.DoesNotExist:
                        pass

                # –†—É–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∫–ª–∞–¥–∞—Ö
                if 'NORTH' in warehouse.code:
                    for ore_data in ore_items:
                        try:
                            item = Item.objects.get(sku=ore_data['sku'])
                            threshold, created = Threshold.objects.get_or_create(
                                warehouse=warehouse,
                                item=item,
                                defaults={
                                    'min_qty': ore_data['min_qty'],
                                    'max_qty': ore_data['max_qty'],
                                    'uom': item.base_uom
                                }
                            )
                            if created:
                                self.stdout.write(f'  ‚úÖ –ü–æ—Ä–æ–≥ —Ä—É–¥—ã: {item.name} –Ω–∞ {warehouse.name}')
                        except Item.DoesNotExist:
                            pass

            # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            try:
                drill_item = Item.objects.get(sku='TOOL_DRILL')
                warehouse = Warehouse.objects.first()

                Alert.objects.get_or_create(
                    warehouse=warehouse,
                    item=drill_item,
                    current_qty=Decimal('5.000'),
                    uom=drill_item.base_uom,
                    severity=Alert.CRIT,
                    message="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –∑–∞–ø–∞—Å –±—É—Ä–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
                    correlation_id="DEMO_ALERT_001"
                )
                self.stdout.write('  ‚úÖ –î–µ–º–æ-–∞–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω')

            except Item.DoesNotExist:
                pass

        except ImportError as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ thresholds: {e}')

except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback

    traceback.print_exc()